{"ast":null,"code":"import axios from \"axios\";\nexport const deleteQuestion = async (spaceId, questionId, userId) => {\n  try {\n    console.log(`spaceId는 ${spaceId}, answerId는 ${answerId} , userId는 ${userId}`);\n    const path = `https://api-mumul.site/spaces/${spaceId}/${questionId}/${userId}/question/delete`;\n    const response = await axios.delete(`https://api-mumul.site/spaces/${spaceId}/${questionId}/${userId}/question/delete`, {\n      data: {\n        userId: userId,\n        spaceId: spaceId,\n        questionId: questionId\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + localStorage.getItem('token')\n      }\n    });\n    console.log(\"질문 삭제 response: \", response.data);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      console.error('에러의 응답:', error.response);\n      //do something\n    } else if (error.request) {\n      console.error('에러의 요청:', error.request);\n      //do something else\n    } else if (error.message) {\n      console.error('에러의 메시지:', error.message);\n      //do something other than the other two\n    }\n    return false;\n  }\n};","map":{"version":3,"names":["axios","deleteQuestion","spaceId","questionId","userId","console","log","answerId","path","response","delete","data","headers","Accept","Authorization","localStorage","getItem","error","request","message"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/api/Q&A/deleteQuestion.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const deleteQuestion = async (spaceId, questionId, userId) => {\r\n  try {\r\n    console.log(`spaceId는 ${spaceId}, answerId는 ${answerId} , userId는 ${userId}`);\r\n\r\n    const path = `https://api-mumul.site/spaces/${spaceId}/${questionId}/${userId}/question/delete`;\r\n\r\n    const response = await axios.delete(\r\n      `https://api-mumul.site/spaces/${spaceId}/${questionId}/${userId}/question/delete`\r\n      , {\r\n        data: {\r\n          userId: userId,\r\n          spaceId: spaceId,\r\n          questionId: questionId\r\n        },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + localStorage.getItem('token')\r\n        },\r\n      }\r\n\r\n\r\n    );\r\n console.log(\"질문 삭제 response: \", response.data);\r\n    return response.data;\r\n  } \r\n  \r\n  catch (error) {\r\n    if (error.response) {\r\n      console.error('에러의 응답:', error.response);\r\n      //do something\r\n\r\n  } else if (error.request) {\r\n      console.error('에러의 요청:', error.request);\r\n      //do something else\r\n\r\n  } else if (error.message) {\r\n      console.error('에러의 메시지:', error.message);\r\n      //do something other than the other two\r\n  }\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,EAAEC,MAAM,KAAK;EACnE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAE,YAAWJ,OAAQ,eAAcK,QAAS,cAAaH,MAAO,EAAC,CAAC;IAE7E,MAAMI,IAAI,GAAI,iCAAgCN,OAAQ,IAAGC,UAAW,IAAGC,MAAO,kBAAiB;IAE/F,MAAMK,QAAQ,GAAG,MAAMT,KAAK,CAACU,MAAM,CAChC,iCAAgCR,OAAQ,IAAGC,UAAW,IAAGC,MAAO,kBAAiB,EAChF;MACAO,IAAI,EAAE;QACJP,MAAM,EAAEA,MAAM;QACdF,OAAO,EAAEA,OAAO;QAChBC,UAAU,EAAEA;MACd,CAAC;MACDS,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;MACzD;IACF,CAGF,CAAC;IACJX,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,QAAQ,CAACE,IAAI,CAAC;IAC3C,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAED,OAAOM,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACR,QAAQ,EAAE;MAClBJ,OAAO,CAACY,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACR,QAAQ,CAAC;MACxC;IAEJ,CAAC,MAAM,IAAIQ,KAAK,CAACC,OAAO,EAAE;MACtBb,OAAO,CAACY,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACC,OAAO,CAAC;MACvC;IAEJ,CAAC,MAAM,IAAID,KAAK,CAACE,OAAO,EAAE;MACtBd,OAAO,CAACY,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACE,OAAO,CAAC;MACxC;IACJ;IACE,OAAO,KAAK;EACd;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}