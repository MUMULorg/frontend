{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\mumul_frontend\\\\mumul\\\\src\\\\component\\\\KakaoAuthHandle.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect } from 'react';\nimport { getUserInfo } from '../api/getUserInfo';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst KakaoAuthHandle = props => {\n  _s();\n  useEffect(() => {\n    const kakaoLogin = async () => {\n      try {\n        let code = new URL(window.location.href).searchParams.get('code');\n        const res = await axios.get(`/v1/oauth/login/kakao?code=${code}`, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          crossDomain: true\n        });\n        console.log(\"카카오 로그인 header: \", res.headers);\n        console.log(\"카카오 로그인 auth: \", res.headers.authorization);\n        localStorage.setItem('token', res.headers.authorization);\n        const userInfo = await getUserInfo();\n        // window.location.href = `/${userInfo.userId}`;\n      } catch (error) {\n        if (error.response) {\n          console.error('에러의 응답:', error.response);\n          //do something\n        } else if (error.request) {\n          console.error('에러의 요청:', error.request);\n          //do something else\n        } else if (error.message) {\n          console.error('에러의 메시지:', error.message);\n          //do something other than the other two\n        }\n      }\n    };\n    kakaoLogin();\n  }, [props.history]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uADF8\\uC778 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(KakaoAuthHandle, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = KakaoAuthHandle;\nKakaoAuthHandle.propTypes = {\n  history: PropTypes.object.isRequired\n};\nexport default KakaoAuthHandle;\nvar _c;\n$RefreshReg$(_c, \"KakaoAuthHandle\");","map":{"version":3,"names":["axios","React","useEffect","getUserInfo","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","KakaoAuthHandle","props","_s","kakaoLogin","code","URL","window","location","href","searchParams","get","res","headers","crossDomain","console","log","authorization","localStorage","setItem","userInfo","error","response","request","message","history","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","object","isRequired","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/component/KakaoAuthHandle.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect } from 'react';\r\nimport { getUserInfo } from '../api/getUserInfo';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst KakaoAuthHandle = (props) => {\r\n  useEffect(() => {\r\n    const kakaoLogin = async () => {\r\n      try {\r\n      let code=new URL(window.location.href).searchParams.get('code');\r\n        const res = await axios.get(`/v1/oauth/login/kakao?code=${code}`,\r\n        {\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          crossDomain: true,\r\n        });\r\n\r\n        console.log(\"카카오 로그인 header: \",res.headers);\r\n        console.log(\"카카오 로그인 auth: \",res.headers.authorization);\r\n        localStorage.setItem('token', res.headers.authorization);\r\n        const userInfo = await getUserInfo();\r\n       // window.location.href = `/${userInfo.userId}`;\r\n      } catch (error) {\r\n        if (error.response) {\r\n          console.error('에러의 응답:', error.response);\r\n          //do something\r\n\r\n      } else if (error.request) {\r\n          console.error('에러의 요청:', error.request);\r\n          //do something else\r\n\r\n      } else if (error.message) {\r\n          console.error('에러의 메시지:', error.message);\r\n          //do something other than the other two\r\n\r\n      }\r\n      }\r\n    };\r\n    kakaoLogin();\r\n  }, [props.history]);\r\n\r\n  return (\r\n    <>\r\n    <p>로그인 중입니다...</p>\r\n    </>\r\n  );\r\n};\r\n\r\nKakaoAuthHandle.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport default KakaoAuthHandle;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACjCT,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACJ,IAAIC,IAAI,GAAC,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,CAACC,YAAY,CAACC,GAAG,CAAC,MAAM,CAAC;QAC7D,MAAMC,GAAG,GAAG,MAAMpB,KAAK,CAACmB,GAAG,CAAE,8BAA6BN,IAAK,EAAC,EAChE;UACEQ,OAAO,EAAE;YACP,QAAQ,EAAE,kBAAkB;YAC5B,cAAc,EAAE;UAClB,CAAC;UACDC,WAAW,EAAE;QACf,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACJ,GAAG,CAACC,OAAO,CAAC;QAC3CE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACJ,GAAG,CAACC,OAAO,CAACI,aAAa,CAAC;QACvDC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,GAAG,CAACC,OAAO,CAACI,aAAa,CAAC;QACxD,MAAMG,QAAQ,GAAG,MAAMzB,WAAW,CAAC,CAAC;QACrC;MACD,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACd,IAAIA,KAAK,CAACC,QAAQ,EAAE;UAClBP,OAAO,CAACM,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACC,QAAQ,CAAC;UACxC;QAEJ,CAAC,MAAM,IAAID,KAAK,CAACE,OAAO,EAAE;UACtBR,OAAO,CAACM,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACE,OAAO,CAAC;UACvC;QAEJ,CAAC,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;UACtBT,OAAO,CAACM,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACG,OAAO,CAAC;UACxC;QAEJ;MACA;IACF,CAAC;IACDpB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACF,KAAK,CAACuB,OAAO,CAAC,CAAC;EAEnB,oBACE3B,OAAA,CAAAE,SAAA;IAAA0B,QAAA,eACA5B,OAAA;MAAA4B,QAAA,EAAG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC,gBAChB,CAAC;AAEP,CAAC;AAAC3B,EAAA,CA3CIF,eAAe;AAAA8B,EAAA,GAAf9B,eAAe;AA6CrBA,eAAe,CAAC+B,SAAS,GAAG;EAC1BP,OAAO,EAAE7B,SAAS,CAACqC,MAAM,CAACC;AAC5B,CAAC;AAGD,eAAejC,eAAe;AAAC,IAAA8B,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}