{"ast":null,"code":"import axios from\"axios\";import{LocalDateTime}from\"js-joda\";export const createAnswer=async(id,currentUserInfo,answerText,btn,questionId)=>{try{const response=await axios.post(\"https://api-mumul.site/spaces/\".concat(id,\"/\").concat(questionId,\"/answer/create\"),{isPublic:btn,sentUserPic:currentUserInfo.picture,receivedUserId:\"\",userId:currentUserInfo.userId,userName:currentUserInfo.name,answerText:answerText,alternativeAnswerText:\"\",createdTime:LocalDateTime.now(),questionId:questionId},{headers:{'Content-Type':'application/json',Accept:'application/json',Authorization:'Bearer '+localStorage.getItem('token')}});return response.data;}catch(error){if(error.response&&error.response.status===401){console.error(\"로그인이 필요합니다.\");// 로그인이 필요한 경우에 대한 처리를 추가합니다.\n}else{console.error(\"질문 등록에 실패함:\",error);// 필요한 에러 처리 로직을 추가합니다.\n}}};","map":{"version":3,"names":["axios","LocalDateTime","createAnswer","id","currentUserInfo","answerText","btn","questionId","response","post","concat","isPublic","sentUserPic","picture","receivedUserId","userId","userName","name","alternativeAnswerText","createdTime","now","headers","Accept","Authorization","localStorage","getItem","data","error","status","console"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/api/Q&A/createAnswer.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { LocalDateTime } from \"js-joda\";\r\n\r\n\r\nexport const createAnswer = async (id, currentUserInfo, answerText, btn, questionId) => {\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      `https://api-mumul.site/spaces/${id}/${questionId}/answer/create`,\r\n      {\r\n        isPublic: btn,\r\n        sentUserPic: currentUserInfo.picture,\r\n        receivedUserId: \"\",\r\n        userId: currentUserInfo.userId,\r\n        userName: currentUserInfo.name,\r\n        answerText: answerText,\r\n        alternativeAnswerText:\"\",\r\n        createdTime: LocalDateTime.now(),\r\n        questionId: questionId\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + localStorage.getItem('token')\r\n        },\r\n      }\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"로그인이 필요합니다.\");\r\n      // 로그인이 필요한 경우에 대한 처리를 추가합니다.\r\n    } else {\r\n      console.error(\"질문 등록에 실패함:\", error);\r\n      // 필요한 에러 처리 로직을 추가합니다.\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,KAAQ,SAAS,CAGvC,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAOC,EAAE,CAAEC,eAAe,CAAEC,UAAU,CAAEC,GAAG,CAAEC,UAAU,GAAK,CAEtF,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAR,KAAK,CAACS,IAAI,kCAAAC,MAAA,CACEP,EAAE,MAAAO,MAAA,CAAIH,UAAU,mBACjD,CACEI,QAAQ,CAAEL,GAAG,CACbM,WAAW,CAAER,eAAe,CAACS,OAAO,CACpCC,cAAc,CAAE,EAAE,CAClBC,MAAM,CAAEX,eAAe,CAACW,MAAM,CAC9BC,QAAQ,CAAEZ,eAAe,CAACa,IAAI,CAC9BZ,UAAU,CAAEA,UAAU,CACtBa,qBAAqB,CAAC,EAAE,CACxBC,WAAW,CAAElB,aAAa,CAACmB,GAAG,CAAC,CAAC,CAChCb,UAAU,CAAEA,UACd,CAAC,CACD,CACEc,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,MAAM,CAAE,kBAAkB,CAC1BC,aAAa,CAAE,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CACzD,CACF,CACF,CAAC,CAED,MAAO,CAAAjB,QAAQ,CAACkB,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACd,GAAIA,KAAK,CAACnB,QAAQ,EAAImB,KAAK,CAACnB,QAAQ,CAACoB,MAAM,GAAK,GAAG,CAAE,CACnDC,OAAO,CAACF,KAAK,CAAC,aAAa,CAAC,CAC5B;AACF,CAAC,IAAM,CACLE,OAAO,CAACF,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnC;AACF,CACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}