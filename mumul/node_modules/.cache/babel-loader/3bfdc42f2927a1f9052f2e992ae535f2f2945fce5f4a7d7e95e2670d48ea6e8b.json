{"ast":null,"code":"import { customAxios } from \"./../customAxios\";\nimport { LocalDateTime } from \"js-joda\";\nexport const createAnswer = async (id, currentUserInfo, answerText, btn, questionId) => {\n  try {\n    const response = await customAxios.post(`/spaces/${id}/${questionId}/answer/create`, {\n      isPublic: btn,\n      sentUserPic: currentUserInfo.picture,\n      receivedUserId: \"\",\n      userId: currentUserInfo.userId,\n      userName: currentUserInfo.name,\n      answerText: answerText,\n      alternativeAnswerText: \"\",\n      createdTime: LocalDateTime.now(),\n      questionId: questionId\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + localStorage.getItem('token')\n      }\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.status === 401) {\n      console.error(\"로그인이 필요합니다.\");\n      // 로그인이 필요한 경우에 대한 처리를 추가합니다.\n    } else {\n      console.error(\"질문 등록에 실패함:\", error);\n      // 필요한 에러 처리 로직을 추가합니다.\n    }\n  }\n};","map":{"version":3,"names":["customAxios","LocalDateTime","createAnswer","id","currentUserInfo","answerText","btn","questionId","response","post","isPublic","sentUserPic","picture","receivedUserId","userId","userName","name","alternativeAnswerText","createdTime","now","headers","Accept","Authorization","localStorage","getItem","data","error","status","console"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/api/Q&A/createAnswer.js"],"sourcesContent":["import { customAxios } from \"./../customAxios\";\r\nimport { LocalDateTime } from \"js-joda\";\r\n\r\n\r\nexport const createAnswer = async (id, currentUserInfo, answerText, btn, questionId) => {\r\n\r\n  try {\r\n    const response = await customAxios.post(\r\n      `/spaces/${id}/${questionId}/answer/create`,\r\n      {\r\n        isPublic: btn,\r\n        sentUserPic: currentUserInfo.picture,\r\n        receivedUserId: \"\",\r\n        userId: currentUserInfo.userId,\r\n        userName: currentUserInfo.name,\r\n        answerText: answerText,\r\n        alternativeAnswerText:\"\",\r\n        createdTime: LocalDateTime.now(),\r\n        questionId: questionId\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + localStorage.getItem('token')\r\n        },\r\n      }\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"로그인이 필요합니다.\");\r\n      // 로그인이 필요한 경우에 대한 처리를 추가합니다.\r\n    } else {\r\n      console.error(\"질문 등록에 실패함:\", error);\r\n      // 필요한 에러 처리 로직을 추가합니다.\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,SAAS;AAGvC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,EAAE,EAAEC,eAAe,EAAEC,UAAU,EAAEC,GAAG,EAAEC,UAAU,KAAK;EAEtF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,WAAW,CAACS,IAAI,CACpC,WAAUN,EAAG,IAAGI,UAAW,gBAAe,EAC3C;MACEG,QAAQ,EAAEJ,GAAG;MACbK,WAAW,EAAEP,eAAe,CAACQ,OAAO;MACpCC,cAAc,EAAE,EAAE;MAClBC,MAAM,EAAEV,eAAe,CAACU,MAAM;MAC9BC,QAAQ,EAAEX,eAAe,CAACY,IAAI;MAC9BX,UAAU,EAAEA,UAAU;MACtBY,qBAAqB,EAAC,EAAE;MACxBC,WAAW,EAAEjB,aAAa,CAACkB,GAAG,CAAC,CAAC;MAChCZ,UAAU,EAAEA;IACd,CAAC,EACD;MACEa,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;MACzD;IACF,CACF,CAAC;IAED,OAAOhB,QAAQ,CAACiB,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAAClB,QAAQ,IAAIkB,KAAK,CAAClB,QAAQ,CAACmB,MAAM,KAAK,GAAG,EAAE;MACnDC,OAAO,CAACF,KAAK,CAAC,aAAa,CAAC;MAC5B;IACF,CAAC,MAAM;MACLE,OAAO,CAACF,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnC;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}