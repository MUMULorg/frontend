{"ast":null,"code":"import { customAxios } from \"./../customAxios\";\nimport { LocalDateTime } from \"js-joda\";\nexport const createQuestion = async (info, id, currentUserInfo, questionText, btn, randomImage) => {\n  const token = localStorage.getItem('token');\n  try {\n    await customAxios.post(`/spaces/${id}/question/create`, {\n      sentUserPic: randomImage,\n      sendingUserId: currentUserInfo.userId,\n      receivingUserId: info.userId,\n      receivedUserPic: info.picture,\n      receivedUserName: info.name,\n      questionText: questionText,\n      createdTime: LocalDateTime.now(),\n      answers: null,\n      userId: currentUserInfo.name,\n      isAnonymous: btn\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    });\n\n    // 추가적인 로직을 처리하거나 성공 후 작업을 수행합니다.\n    // Call the Comment function with the necessary props\n  } catch (error) {\n    if (error.response && error.response.status === 401) {\n      console.error(\"로그인이 필요합니다.\");\n      // 로그인이 필요한 경우에 대한 처리를 추가합니다.\n    } else {\n      console.error(\"질문 등록에 실패함:\", error);\n      // 필요한 에러 처리 로직을 추가합니다.\n    }\n  }\n};","map":{"version":3,"names":["customAxios","LocalDateTime","createQuestion","info","id","currentUserInfo","questionText","btn","randomImage","token","localStorage","getItem","post","sentUserPic","sendingUserId","userId","receivingUserId","receivedUserPic","picture","receivedUserName","name","createdTime","now","answers","isAnonymous","headers","Accept","Authorization","error","response","status","console"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/api/Q&A/createQuestion.js"],"sourcesContent":["import { customAxios } from \"./../customAxios\";\r\nimport { LocalDateTime } from \"js-joda\";\r\n\r\n\r\nexport const createQuestion = async (info, id, currentUserInfo, questionText, btn, randomImage) => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    await customAxios.post(\r\n      `/spaces/${id}/question/create`,\r\n      {\r\n        sentUserPic: randomImage,\r\n        sendingUserId: currentUserInfo.userId,\r\n        receivingUserId: info.userId,\r\n        receivedUserPic: info.picture,\r\n        receivedUserName: info.name,\r\n        questionText: questionText,\r\n        createdTime: LocalDateTime.now(),\r\n        answers: null,\r\n        userId: currentUserInfo.name,\r\n        isAnonymous: btn \r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + token\r\n        },\r\n      }\r\n    );\r\n\r\n    // 추가적인 로직을 처리하거나 성공 후 작업을 수행합니다.\r\n   // Call the Comment function with the necessary props\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"로그인이 필요합니다.\");\r\n      // 로그인이 필요한 경우에 대한 처리를 추가합니다.\r\n    } else {\r\n      console.error(\"질문 등록에 실패함:\", error);\r\n      // 필요한 에러 처리 로직을 추가합니다.\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,SAAS;AAGvC,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,IAAI,EAAEC,EAAE,EAAEC,eAAe,EAAEC,YAAY,EAAEC,GAAG,EAAEC,WAAW,KAAK;EACjG,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI;IACF,MAAMX,WAAW,CAACY,IAAI,CACnB,WAAUR,EAAG,kBAAiB,EAC/B;MACES,WAAW,EAAEL,WAAW;MACxBM,aAAa,EAAET,eAAe,CAACU,MAAM;MACrCC,eAAe,EAAEb,IAAI,CAACY,MAAM;MAC5BE,eAAe,EAAEd,IAAI,CAACe,OAAO;MAC7BC,gBAAgB,EAAEhB,IAAI,CAACiB,IAAI;MAC3Bd,YAAY,EAAEA,YAAY;MAC1Be,WAAW,EAAEpB,aAAa,CAACqB,GAAG,CAAC,CAAC;MAChCC,OAAO,EAAE,IAAI;MACbR,MAAM,EAAEV,eAAe,CAACe,IAAI;MAC5BI,WAAW,EAAEjB;IACf,CAAC,EACD;MACEkB,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,SAAS,GAAGlB;MAC7B;IACF,CACF,CAAC;;IAED;IACD;EACD,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACnDC,OAAO,CAACH,KAAK,CAAC,aAAa,CAAC;MAC5B;IACF,CAAC,MAAM;MACLG,OAAO,CAACH,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnC;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}