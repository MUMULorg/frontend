{"ast":null,"code":"import axios from\"axios\";import{LocalDateTime}from\"js-joda\";export const createQuestion=async(info,id,currentUserInfo,questionText,btn,randomImage)=>{try{const token=localStorage.getItem('token');await axios.post(\"https://api-mumul.site/spaces/\".concat(id,\"/question/create\"),{sentUserPic:randomImage,sendingUserId:currentUserInfo.userId,receivingUserId:info.userId,receivedUserPic:info.picture,receivedUserName:info.name,questionText:questionText,createdTime:LocalDateTime.now(),answers:null,userId:currentUserInfo.name,isAnonymous:btn},{headers:{'Content-Type':'application/json',Accept:'application/json',Authorization:'Bearer '+token}});// 추가적인 로직을 처리하거나 성공 후 작업을 수행합니다.\n// Call the Comment function with the necessary props\n}catch(error){if(error.response&&error.response.status===401){console.error(\"로그인이 필요합니다.\");// 로그인이 필요한 경우에 대한 처리를 추가합니다.\n}else{console.error(\"질문 등록에 실패함:\",error);// 필요한 에러 처리 로직을 추가합니다.\n}}};","map":{"version":3,"names":["axios","LocalDateTime","createQuestion","info","id","currentUserInfo","questionText","btn","randomImage","token","localStorage","getItem","post","concat","sentUserPic","sendingUserId","userId","receivingUserId","receivedUserPic","picture","receivedUserName","name","createdTime","now","answers","isAnonymous","headers","Accept","Authorization","error","response","status","console"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/api/Q&A/createQuestion.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { LocalDateTime } from \"js-joda\";\r\n\r\n\r\nexport const createQuestion = async (info, id, currentUserInfo, questionText, btn, randomImage) => {\r\n  try {\r\n  const token = localStorage.getItem('token');\r\n  \r\n    await axios.post(\r\n      `https://api-mumul.site/spaces/${id}/question/create`,\r\n      {\r\n        sentUserPic: randomImage,\r\n        sendingUserId: currentUserInfo.userId,\r\n        receivingUserId: info.userId,\r\n        receivedUserPic: info.picture,\r\n        receivedUserName: info.name,\r\n        questionText: questionText,\r\n        createdTime: LocalDateTime.now(),\r\n        answers: null,\r\n        userId: currentUserInfo.name,\r\n        isAnonymous: btn \r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer ' + token\r\n        },\r\n      }\r\n    );\r\n\r\n    // 추가적인 로직을 처리하거나 성공 후 작업을 수행합니다.\r\n   // Call the Comment function with the necessary props\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"로그인이 필요합니다.\");\r\n      // 로그인이 필요한 경우에 대한 처리를 추가합니다.\r\n    } else {\r\n      console.error(\"질문 등록에 실패함:\", error);\r\n      // 필요한 에러 처리 로직을 추가합니다.\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,KAAQ,SAAS,CAGvC,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAAA,CAAOC,IAAI,CAAEC,EAAE,CAAEC,eAAe,CAAEC,YAAY,CAAEC,GAAG,CAAEC,WAAW,GAAK,CACjG,GAAI,CACJ,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAEzC,KAAM,CAAAX,KAAK,CAACY,IAAI,kCAAAC,MAAA,CACmBT,EAAE,qBACnC,CACEU,WAAW,CAAEN,WAAW,CACxBO,aAAa,CAAEV,eAAe,CAACW,MAAM,CACrCC,eAAe,CAAEd,IAAI,CAACa,MAAM,CAC5BE,eAAe,CAAEf,IAAI,CAACgB,OAAO,CAC7BC,gBAAgB,CAAEjB,IAAI,CAACkB,IAAI,CAC3Bf,YAAY,CAAEA,YAAY,CAC1BgB,WAAW,CAAErB,aAAa,CAACsB,GAAG,CAAC,CAAC,CAChCC,OAAO,CAAE,IAAI,CACbR,MAAM,CAAEX,eAAe,CAACgB,IAAI,CAC5BI,WAAW,CAAElB,GACf,CAAC,CACD,CACEmB,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,MAAM,CAAE,kBAAkB,CAC1BC,aAAa,CAAE,SAAS,CAAGnB,KAC7B,CACF,CACF,CAAC,CAED;AACD;AACD,CAAE,MAAOoB,KAAK,CAAE,CACd,GAAIA,KAAK,CAACC,QAAQ,EAAID,KAAK,CAACC,QAAQ,CAACC,MAAM,GAAK,GAAG,CAAE,CACnDC,OAAO,CAACH,KAAK,CAAC,aAAa,CAAC,CAC5B;AACF,CAAC,IAAM,CACLG,OAAO,CAACH,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnC;AACF,CACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}