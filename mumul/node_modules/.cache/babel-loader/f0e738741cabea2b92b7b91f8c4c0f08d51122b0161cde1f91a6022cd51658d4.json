{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import moment from\"moment\";import\"moment/locale/ko\";import More from\"./../img/icon/icMore.png\";import Bin from\"./../img/icon/icBin.png\";import Comment from\"./../img/icon/icChat.png\";import AnonymousAnswer from\"./AnonymousAnswer\";import Delete from\"./popup/QDelete\";import{getPReceivedComment}from\"../api/Q&A/getPReceivedComment\";import{getSpaceInfo}from\"../api/getSpaceInfo\";import UntilAnswering from\"./UntilAnswering\";import AnswerRegister from\"./popup/AnswerRegister\";import CantModal from\"./popup/CantRegister\";import ADelete from\"./popup/ADelete\";import Profile5 from\"./../img/Ellipse 105.png\";import Loading from\"./Loading\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";// TODO : spaceId 근원 트랙킹하기 -> undefined 해\nfunction ReceiveComment(_ref){let{spaceId,currentUserInfo}=_ref;const[page,setPage]=useState(0);// 페이지 번호 상태값 추가\nconst[pageSize,setPageSize]=useState(5);// 페이지 크기 상태값 추가\nconst[loading,setLoading]=useState(false);// 로딩 상태값 추가\nconst[allDataFetched,setAllDataFetched]=useState(false);// 모든 데이터를 가져왔는지 여부를 나타내는 상태값 추가\nconst[fetchingMoreData,setFetchingMoreData]=useState(false);const[receivedComments,setReceivedComments]=useState([]);// 질문 삭제 상태값\nconst[deleteStates,setDeleteStates]=useState([]);// 답변 삭제 상태값\nconst[a_deleteStates,a_setDeleteStates]=useState([]);// 질문 공유 상태값\nconst[shareStates,setShareStates]=useState({});//질문 삭제 모달 오픈 상태값\nconst[delModal,setDelModal]=useState(false);//답변 삭제 모달 오픈 상태값\nconst[a_delModal,a_setDelModal]=useState(false);//등록불가 모달 오픈 상태값\nconst[cantModal,setCantModal]=useState(false);const[answerModal,setAnswerModal]=useState(false);// 선택한 답변의 고유 ID를 상태값에 저장\nconst[selectedAnswerId,setSelectedAnswerId]=useState([]);// 선택한 질문의 고유 ID를 상태값에 저장\nconst[selectedQuestionId,setSelectedQuestionId]=useState([]);const[selectedQuestionUserId,setSelectedQuestionUserId]=useState([]);const[selectedQuestionUserPic,setSelectedQuestionPic]=useState([]);const[selectedQuestionText,setSelectedQuestionText]=useState([]);// 선택한 질문의 스페이스 ID와 유저 ID를 상태값에 저장\nconst[selectedSpaceId,setSelectedSpaceId]=useState([]);const[selectedUserId,setSelectedUserId]=useState([]);// More 아이콘 드롭다운 오픈 여부 상태값\nconst[q_openedDropdownIndex,q_setOpenedDropdownIndex]=useState([]);const[a_openedDropdownIndex,a_setOpenedDropdownIndex]=useState([]);// 이동한 스페이스 상태값\nconst[spaceOwner,setSpaceOwner]=useState({userId:\"\",picture:\"\",name:\"\"});const fetchData=async function(){let isInitialFetch=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;try{setLoading(true);// isInitialFetch가 true일 경우에만 페이지 번호를 초기화\nif(isInitialFetch){setPage(0);}const spaInfo=await getSpaceInfo(spaceId);const response=await getPReceivedComment(spaceId,page,pageSize);// newComments가 정의되지 않았다면 빈 배열로 초기화\nconst newComments=isInitialFetch?response.data:[...receivedComments,...response.data];setReceivedComments(newComments);setSpaceOwner(spaInfo);// deleteStates 배열을 모든 질문에 대해 초기화\n// fix: newComments의 undefined 을 매핑하는 문제 해결\nconst initialDeleteStates=newComments.map(()=>false);setDeleteStates(initialDeleteStates);a_setDeleteStates(initialDeleteStates);setShareStates(initialDeleteStates);// 모든 데이터를 불러온 경우에는 더 이상 데이터를 불러오지 않도록 설정\nif(response.data.length===0){setAllDataFetched(true);}setLoading(false);}catch(error){setLoading(false);console.error(\"Error fetching data:\",error);}};const spinnerRef=useRef(null);useEffect(()=>{fetchData();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[spaceId,pageSize]);useEffect(()=>{const fetchDataOnScroll=async()=>{if(!fetchingMoreData&&!allDataFetched){setFetchingMoreData(true);const response=await getPReceivedComment(spaceId,page+1,pageSize);setFetchingMoreData(false);if(response.data.length===0){setAllDataFetched(true);return;// 더 이상 데이터를 불러올 필요가 없으므로 종료\n}setReceivedComments(prevData=>[...prevData,...response.data.map(item=>({...item,key:item.id}))]);setPage(prevPage=>prevPage+1);}};const handleScroll=()=>{const scrollY=window.scrollY;const windowHeight=window.innerHeight;const contentHeight=document.body.scrollHeight;if(scrollY>=contentHeight-windowHeight-200){fetchDataOnScroll();}};window.addEventListener(\"scroll\",handleScroll);return()=>{window.removeEventListener(\"scroll\",handleScroll);};},[spaceId,page,pageSize,allDataFetched,fetchingMoreData]);// 클릭한 질문에 대한 삭제 상태값 변경\nconst clickMore=index=>{q_setOpenedDropdownIndex(prevIndex=>prevIndex===index?null:index);a_setOpenedDropdownIndex(null);// Close answer modal if any is open\nsetDeleteStates(prevStates=>{const newStates=[...prevStates];newStates[index]=!newStates[index];return newStates;});};// 클릭한 답변에 대한 삭제 상태값 변경\nconst clickMore_1=index=>{a_setOpenedDropdownIndex(prevIndex=>prevIndex===index?null:index);q_setOpenedDropdownIndex(null);// Close question modal if any is open\na_setDeleteStates(prevStates=>{const newStates=[...prevStates];newStates[index]=!newStates[index];return newStates;});};// // 클릭한 질문에 대한 공유하기 상태값 변경\n// const clickMore_s = (index) => {\n//   setShareStates((prevStates) => {\n//     const newStates = [...prevStates];\n//     newStates[index] = !newStates[index];\n//     return newStates;\n//   });\n// };\n// 질문 삭제하기 클릭 시 모달 오픈\nconst showDelModal=(questionId,spaceId,userId)=>{// 삭제하기 드랍다운 지우기\nsetDeleteStates(\"\");setSelectedQuestionId(questionId);// 선택한 질문의 ID를 상태값에 저장\nsetSelectedSpaceId(spaceId);// 선택한 질문의 스페이스 ID를 상태값에 저장\nsetSelectedUserId(userId);// 선택한 질문의 유저 ID를 상태값에 저장\nsetDelModal(true);};// 답변 삭제하기 클릭 시 모달 오픈\nconst a_showDelModal=(answerId,spaceId,userId)=>{setSelectedAnswerId(answerId);// 선택한 질문의 ID를 상태값에 저장\nsetSelectedSpaceId(spaceId);// 선택한 질문의 스페이스 ID를 상태값에 저장\nsetSelectedUserId(userId);// 선택한 질문의 유저 ID를 상태값에 저장\na_setDelModal(true);};// 두번째 답변 등록 시 모달 오픈\nconst showCantModal=()=>{setCantModal(true);};// 삭제 팝업  닫기\nconst onClose=e=>{setDelModal(false);a_setDelModal(false);setCantModal(false);// setShare(false);\n};//공유하기  오픈\n// const showShareModal = (questionId) => {\n//   setSelectedQuestionId(questionId); // 선택한 질문의 ID를 상태값에 저장\n//   setShare(true);\n// };\nconst showAnswerModal=(questionId,sentUserId,sentUserPic,questionText)=>{setAnswerModal(true);setSelectedQuestionId(questionId);// 선택한 질문의 ID를 상태값에 저장\nsetSelectedQuestionUserId(sentUserId);// 선택한 질문의 유저 아이디를 상태값에 저장\nsetSelectedQuestionPic(sentUserPic);// 선택한 질문의 유저 사진값을 상태값에 저장\nsetSelectedQuestionText(questionText);// 선택한 질문의 내용 상태값에 저장\n};const closeAnswerModal=()=>{setAnswerModal(false);};return/*#__PURE__*/_jsxs(_Fragment,{children:[receivedComments.length===0&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"placeholder\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"profileArea\",children:/*#__PURE__*/_jsx(\"img\",{src:Profile5,alt:\"profile1\",className:\"pre_questioner\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"cnt\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"pre_Nickname\",children:\"\\uC775\\uBA85\\uC758 \\uD1A0\\uB07C\"}),/*#__PURE__*/_jsx(\"p\",{className:\"pre_min\",children:\"\\uC5B8\\uC820\\uAC00\"}),/*#__PURE__*/_jsx(\"p\",{className:\"pre_commentCnt\",children:/*#__PURE__*/_jsx(\"span\",{role:\"img\",\"aria-label\":\"link\",children:\"\\uBC1B\\uC740 \\uC9C8\\uBB38\\uC774 \\uC5C6\\uC5B4\\uC694\\uD83E\\uDD16 \\uCCAB \\uBB34\\uBB3C\\uC758 \\uC8FC\\uC778\\uACF5\\uC774 \\uB418\\uC5B4 \\uBCF4\\uC138\\uC694!\"})})]})]})}),receivedComments.slice().map((received,index)=>/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:received.answers.length>0?\"commentWrap questionWrap\":\"pre\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"profileArea\",children:/*#__PURE__*/_jsx(\"img\",{src:received.sentUserPic,alt:\"profile1\",className:\"questioner \".concat(received.isAnonymous?\"anonymous\":\"\"),onClick:()=>{if(!received.isAnonymous){window.location.href=\"/\".concat(received.sendingUserId);}}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"cnt\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"Nicname\",children:received.userId}),/*#__PURE__*/_jsx(\"p\",{className:\"min\",children:getTimeDifference(received.createdTime)}),/*#__PURE__*/_jsx(\"p\",{className:\"commentCnt\",children:received.questionText}),/*#__PURE__*/_jsx(\"div\",{className:\"heart\",children:received.answers.length>0?received.receivingUserId===currentUserInfo.userId&&/*#__PURE__*/_jsx(\"img\",{src:Comment,alt:\"comment\",className:\"chat\",onClick:showCantModal}):/*#__PURE__*/_jsx(_Fragment,{children:currentUserInfo.userId!==spaceOwner.userId?\"\":/*#__PURE__*/_jsx(\"img\",{src:Comment,alt:\"comment\",className:\"chat\",onClick:()=>showAnswerModal(received.id,received.userId,received.sentUserPic,received.questionText)})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"more\",children:[currentUserInfo.userId===spaceOwner.userId||currentUserInfo.userId===received.sendingUserId?/*#__PURE__*/_jsx(\"img\",{src:More,alt:\"more\",onClick:()=>clickMore(index)}):\"\",deleteStates[index]&&/*#__PURE__*/_jsx(\"div\",{className:\"del\",onClick:()=>showDelModal(received.id,spaceId,currentUserInfo.userId),children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"img\",{src:Bin,alt:\"btin\"}),\"\\uC0AD\\uC81C\\uD558\\uAE30\"]})})]})]})]},received.id),/*#__PURE__*/_jsxs(\"div\",{className:\"commentWrap answerWrap\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"profileArea\",children:received.answers.length===0?/*#__PURE__*/_jsx(\"img\",{src:spaceOwner.picture,alt:\"profile2\",className:\"pre_questioner\"}):/*#__PURE__*/_jsx(\"img\",{src:spaceOwner.picture,alt:\"profile2\",className:\"respondent\",onClick:()=>{if(spaceId!==received.answers[0].userId.toString()){window.location.href=\"/\".concat(received.answers[0].userId);}}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"cnt\",children:[received.answers.length===0?/*#__PURE__*/_jsx(\"p\",{className:\"pre_Nickname\",children:spaceOwner.name}):/*#__PURE__*/_jsx(\"p\",{className:\"Nicname\",children:spaceOwner.name}),received.answers.length===0?/*#__PURE__*/_jsx(UntilAnswering,{}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{className:\"min\",children:getTimeDifference(received.answers[0].createdTime)}),/*#__PURE__*/_jsx(AnonymousAnswer,{question:received,answers:received.answers,currentUserInfo:currentUserInfo})]}),received.answers.length===0?\"\":/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"more\",children:[currentUserInfo.userId===received.answers[0].userId?/*#__PURE__*/_jsx(\"img\",{src:More,alt:\"more\",onClick:()=>clickMore_1(index)}):\"\",a_deleteStates[index]&&/*#__PURE__*/_jsx(\"div\",{className:\"del\",onClick:()=>a_showDelModal(received.answers[0].id,spaceId,currentUserInfo.userId),children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"img\",{src:Bin,alt:\"btin\"}),\"\\uC0AD\\uC81C\\uD558\\uAE30\"]})})]})})]}),delModal&&/*#__PURE__*/_jsx(Delete,{questionId:selectedQuestionId,spaceId:selectedSpaceId// 스페이스 ID 전달\n,userId:selectedUserId// 유저 ID 전달\n,onClose:onClose}),a_delModal&&/*#__PURE__*/_jsx(ADelete,{answerId:selectedAnswerId,spaceId:selectedSpaceId// 스페이스 ID 전달\n,userId:selectedUserId// 유저 ID 전달\n,onClose:onClose}),cantModal&&/*#__PURE__*/_jsx(CantModal,{onClose:onClose})]})]},received.id)),answerModal&&/*#__PURE__*/_jsx(AnswerRegister,{CloseAnswerModal:closeAnswerModal,currentUserInfo:currentUserInfo,questionId:selectedQuestionId,sentUserId:selectedQuestionUserId,sentUserPic:selectedQuestionUserPic,questionText:selectedQuestionText}),loading&&/*#__PURE__*/_jsx(Loading,{}),/*#__PURE__*/_jsx(\"div\",{ref:spinnerRef})]});}export default ReceiveComment;// 질문 등록 시간과 현재 시간 사이의 차이를 계산하는 함수\nfunction getTimeDifference(createdTime){return moment(createdTime).locale(\"ko\").fromNow();}","map":{"version":3,"names":["React","useState","useEffect","useRef","moment","More","Bin","Comment","AnonymousAnswer","Delete","getPReceivedComment","getSpaceInfo","UntilAnswering","AnswerRegister","CantModal","ADelete","Profile5","Loading","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ReceiveComment","_ref","spaceId","currentUserInfo","page","setPage","pageSize","setPageSize","loading","setLoading","allDataFetched","setAllDataFetched","fetchingMoreData","setFetchingMoreData","receivedComments","setReceivedComments","deleteStates","setDeleteStates","a_deleteStates","a_setDeleteStates","shareStates","setShareStates","delModal","setDelModal","a_delModal","a_setDelModal","cantModal","setCantModal","answerModal","setAnswerModal","selectedAnswerId","setSelectedAnswerId","selectedQuestionId","setSelectedQuestionId","selectedQuestionUserId","setSelectedQuestionUserId","selectedQuestionUserPic","setSelectedQuestionPic","selectedQuestionText","setSelectedQuestionText","selectedSpaceId","setSelectedSpaceId","selectedUserId","setSelectedUserId","q_openedDropdownIndex","q_setOpenedDropdownIndex","a_openedDropdownIndex","a_setOpenedDropdownIndex","spaceOwner","setSpaceOwner","userId","picture","name","fetchData","isInitialFetch","arguments","length","undefined","spaInfo","response","newComments","data","initialDeleteStates","map","error","console","spinnerRef","fetchDataOnScroll","prevData","item","key","id","prevPage","handleScroll","scrollY","window","windowHeight","innerHeight","contentHeight","document","body","scrollHeight","addEventListener","removeEventListener","clickMore","index","prevIndex","prevStates","newStates","clickMore_1","showDelModal","questionId","a_showDelModal","answerId","showCantModal","onClose","e","showAnswerModal","sentUserId","sentUserPic","questionText","closeAnswerModal","children","className","src","alt","role","slice","received","answers","concat","isAnonymous","onClick","location","href","sendingUserId","getTimeDifference","createdTime","receivingUserId","toString","question","CloseAnswerModal","ref","locale","fromNow"],"sources":["C:/Users/PC/Desktop/mumul_frontend/mumul/src/component/ReceiveComment.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/ko\";\r\nimport More from \"./../img/icon/icMore.png\";\r\nimport Bin from \"./../img/icon/icBin.png\";\r\nimport Comment from \"./../img/icon/icChat.png\";\r\nimport AnonymousAnswer from \"./AnonymousAnswer\";\r\nimport Delete from \"./popup/QDelete\";\r\nimport { getPReceivedComment } from \"../api/Q&A/getPReceivedComment\";\r\nimport { getSpaceInfo } from \"../api/getSpaceInfo\";\r\nimport UntilAnswering from \"./UntilAnswering\";\r\nimport AnswerRegister from \"./popup/AnswerRegister\";\r\nimport CantModal from \"./popup/CantRegister\";\r\nimport ADelete from \"./popup/ADelete\";\r\nimport Profile5 from \"./../img/Ellipse 105.png\";\r\nimport Loading from \"./Loading\";\r\nimport PropTypes from 'prop-types';\r\n\r\n// TODO : spaceId 근원 트랙킹하기 -> undefined 해\r\n\r\nfunction ReceiveComment({ spaceId, currentUserInfo }) {\r\n  const [page, setPage] = useState(0); // 페이지 번호 상태값 추가\r\n  const [pageSize, setPageSize] = useState(5); // 페이지 크기 상태값 추가\r\n  const [loading, setLoading] = useState(false); // 로딩 상태값 추가\r\n  const [allDataFetched, setAllDataFetched] = useState(false); // 모든 데이터를 가져왔는지 여부를 나타내는 상태값 추가\r\n  const [fetchingMoreData, setFetchingMoreData] = useState(false);\r\n  const [receivedComments, setReceivedComments] = useState([]);\r\n  // 질문 삭제 상태값\r\n  const [deleteStates, setDeleteStates] = useState([]);\r\n  // 답변 삭제 상태값\r\n  const [a_deleteStates, a_setDeleteStates] = useState([]);\r\n\r\n  // 질문 공유 상태값\r\n  const [shareStates, setShareStates] = useState({});\r\n\r\n  //질문 삭제 모달 오픈 상태값\r\n  const [delModal, setDelModal] = useState(false);\r\n  //답변 삭제 모달 오픈 상태값\r\n  const [a_delModal, a_setDelModal] = useState(false);\r\n  //등록불가 모달 오픈 상태값\r\n  const [cantModal, setCantModal] = useState(false);\r\n  const [answerModal, setAnswerModal] = useState(false);\r\n\r\n  // 선택한 답변의 고유 ID를 상태값에 저장\r\n  const [selectedAnswerId, setSelectedAnswerId] = useState([]);\r\n\r\n  // 선택한 질문의 고유 ID를 상태값에 저장\r\n  const [selectedQuestionId, setSelectedQuestionId] = useState([]);\r\n\r\n  const [selectedQuestionUserId, setSelectedQuestionUserId] = useState([]);\r\n  const [selectedQuestionUserPic, setSelectedQuestionPic] = useState([]);\r\n  const [selectedQuestionText, setSelectedQuestionText] = useState([]);\r\n\r\n  // 선택한 질문의 스페이스 ID와 유저 ID를 상태값에 저장\r\n  const [selectedSpaceId, setSelectedSpaceId] = useState([]);\r\n  const [selectedUserId, setSelectedUserId] = useState([]);\r\n\r\n  // More 아이콘 드롭다운 오픈 여부 상태값\r\n  const [q_openedDropdownIndex, q_setOpenedDropdownIndex] = useState([]);\r\n  const [a_openedDropdownIndex, a_setOpenedDropdownIndex] = useState([]);\r\n\r\n  // 이동한 스페이스 상태값\r\n  const [spaceOwner, setSpaceOwner] = useState({\r\n    userId: \"\",\r\n    picture: \"\",\r\n    name: \"\",\r\n  });\r\n\r\n  const fetchData = async (isInitialFetch = true) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // isInitialFetch가 true일 경우에만 페이지 번호를 초기화\r\n      if (isInitialFetch) {\r\n        setPage(0);\r\n      }\r\n\r\n      const spaInfo = await getSpaceInfo(spaceId);\r\n      const response = await getPReceivedComment(spaceId, page, pageSize);\r\n\r\n     // newComments가 정의되지 않았다면 빈 배열로 초기화\r\n      const newComments = isInitialFetch\r\n        ? response.data\r\n        : [...receivedComments, ...response.data];\r\n      setReceivedComments(newComments);\r\n      setSpaceOwner(spaInfo);\r\n\r\n      // deleteStates 배열을 모든 질문에 대해 초기화\r\n      // fix: newComments의 undefined 을 매핑하는 문제 해결\r\n      const initialDeleteStates = newComments.map(() => false);\r\n\r\n      setDeleteStates(initialDeleteStates);\r\n      a_setDeleteStates(initialDeleteStates);\r\n      setShareStates(initialDeleteStates);\r\n\r\n      // 모든 데이터를 불러온 경우에는 더 이상 데이터를 불러오지 않도록 설정\r\n      if (response.data.length === 0) {\r\n        setAllDataFetched(true);\r\n      }\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const spinnerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [spaceId, pageSize]);\r\n\r\n  useEffect(() => {\r\n    const fetchDataOnScroll = async () => {\r\n      if (!fetchingMoreData && !allDataFetched) {\r\n        setFetchingMoreData(true);\r\n\r\n        const response = await getPReceivedComment(spaceId, page + 1, pageSize);\r\n\r\n        setFetchingMoreData(false);\r\n\r\n        if (response.data.length === 0) {\r\n          setAllDataFetched(true);\r\n          return; // 더 이상 데이터를 불러올 필요가 없으므로 종료\r\n        }\r\n\r\n        setReceivedComments((prevData) => [\r\n          ...prevData,\r\n          ...response.data.map((item) => ({ ...item, key: item.id })),\r\n        ]);\r\n        setPage((prevPage) => prevPage + 1);\r\n      }\r\n    };\r\n\r\n    const handleScroll = () => {\r\n      const scrollY = window.scrollY;\r\n      const windowHeight = window.innerHeight;\r\n      const contentHeight = document.body.scrollHeight;\r\n\r\n      if (scrollY >= contentHeight - windowHeight - 200) {\r\n        fetchDataOnScroll();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, [spaceId, page, pageSize, allDataFetched, fetchingMoreData]);\r\n\r\n  // 클릭한 질문에 대한 삭제 상태값 변경\r\n  const clickMore = (index) => {\r\n    q_setOpenedDropdownIndex((prevIndex) =>\r\n      prevIndex === index ? null : index\r\n    );\r\n    a_setOpenedDropdownIndex(null); // Close answer modal if any is open\r\n    setDeleteStates((prevStates) => {\r\n      const newStates = [...prevStates];\r\n      newStates[index] = !newStates[index];\r\n      return newStates;\r\n    });\r\n  };\r\n\r\n  // 클릭한 답변에 대한 삭제 상태값 변경\r\n  const clickMore_1 = (index) => {\r\n    a_setOpenedDropdownIndex((prevIndex) =>\r\n      prevIndex === index ? null : index\r\n    );\r\n    q_setOpenedDropdownIndex(null); // Close question modal if any is open\r\n    a_setDeleteStates((prevStates) => {\r\n      const newStates = [...prevStates];\r\n      newStates[index] = !newStates[index];\r\n      return newStates;\r\n    });\r\n  };\r\n\r\n  // // 클릭한 질문에 대한 공유하기 상태값 변경\r\n  // const clickMore_s = (index) => {\r\n  //   setShareStates((prevStates) => {\r\n  //     const newStates = [...prevStates];\r\n  //     newStates[index] = !newStates[index];\r\n  //     return newStates;\r\n  //   });\r\n  // };\r\n\r\n  // 질문 삭제하기 클릭 시 모달 오픈\r\n  const showDelModal = (questionId, spaceId, userId) => {\r\n    // 삭제하기 드랍다운 지우기\r\n    setDeleteStates(\"\");\r\n    setSelectedQuestionId(questionId); // 선택한 질문의 ID를 상태값에 저장\r\n    setSelectedSpaceId(spaceId); // 선택한 질문의 스페이스 ID를 상태값에 저장\r\n    setSelectedUserId(userId); // 선택한 질문의 유저 ID를 상태값에 저장\r\n    setDelModal(true);\r\n  };\r\n\r\n  // 답변 삭제하기 클릭 시 모달 오픈\r\n  const a_showDelModal = (answerId, spaceId, userId) => {\r\n    setSelectedAnswerId(answerId); // 선택한 질문의 ID를 상태값에 저장\r\n    setSelectedSpaceId(spaceId); // 선택한 질문의 스페이스 ID를 상태값에 저장\r\n    setSelectedUserId(userId); // 선택한 질문의 유저 ID를 상태값에 저장\r\n    a_setDelModal(true);\r\n  };\r\n\r\n  // 두번째 답변 등록 시 모달 오픈\r\n  const showCantModal = () => {\r\n    setCantModal(true);\r\n  };\r\n\r\n  // 삭제 팝업  닫기\r\n  const onClose = (e) => {\r\n    setDelModal(false);\r\n    a_setDelModal(false);\r\n    setCantModal(false);\r\n    // setShare(false);\r\n  };\r\n\r\n  //공유하기  오픈\r\n  // const showShareModal = (questionId) => {\r\n  //   setSelectedQuestionId(questionId); // 선택한 질문의 ID를 상태값에 저장\r\n  //   setShare(true);\r\n  // };\r\n\r\n  const showAnswerModal = (\r\n    questionId,\r\n    sentUserId,\r\n    sentUserPic,\r\n    questionText\r\n  ) => {\r\n    setAnswerModal(true);\r\n    setSelectedQuestionId(questionId); // 선택한 질문의 ID를 상태값에 저장\r\n    setSelectedQuestionUserId(sentUserId); // 선택한 질문의 유저 아이디를 상태값에 저장\r\n    setSelectedQuestionPic(sentUserPic); // 선택한 질문의 유저 사진값을 상태값에 저장\r\n    setSelectedQuestionText(questionText); // 선택한 질문의 내용 상태값에 저장\r\n  };\r\n\r\n  const closeAnswerModal = () => {\r\n    setAnswerModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {receivedComments.length === 0 && (\r\n        <>\r\n         <div className=\"placeholder\">\r\n            <div className=\"profileArea\">\r\n              <img src={Profile5} alt=\"profile1\" className=\"pre_questioner\" />\r\n            </div>\r\n            <div className=\"cnt\">\r\n              <p className=\"pre_Nickname\">익명의 토끼</p>\r\n              <p className=\"pre_min\">언젠가</p>\r\n              <p className=\"pre_commentCnt\">\r\n              <span role=\"img\" aria-label=\"link\">\r\n                받은 질문이 없어요🤖 첫 무물의 주인공이 되어 보세요!\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      {receivedComments.slice().map((received, index) => (\r\n        <React.Fragment key={received.id}>\r\n          <div\r\n            key={received.id}\r\n            className={\r\n              received.answers.length > 0\r\n                ? \"commentWrap questionWrap\"\r\n                : \"pre\"\r\n            }\r\n          >\r\n            <div className=\"profileArea\">\r\n              <img\r\n                src={received.sentUserPic}\r\n                alt=\"profile1\"\r\n                className={`questioner ${\r\n                  received.isAnonymous ? \"anonymous\" : \"\"\r\n                }`}\r\n                onClick={() => {\r\n                  if (!received.isAnonymous) {\r\n                    window.location.href = `/${received.sendingUserId}`;\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"cnt\">\r\n              <p className=\"Nicname\">{received.userId}</p>\r\n              <p className=\"min\">{getTimeDifference(received.createdTime)}</p>\r\n              <p className=\"commentCnt\">{received.questionText}</p>\r\n              <div className=\"heart\">\r\n                {received.answers.length > 0 ? (\r\n                  received.receivingUserId === currentUserInfo.userId && (\r\n                    <img\r\n                      src={Comment}\r\n                      alt=\"comment\"\r\n                      className=\"chat\"\r\n                      onClick={showCantModal}\r\n                    />\r\n                  )\r\n                ) : (\r\n                  <>\r\n                    {currentUserInfo.userId !== spaceOwner.userId ? (\r\n                      \"\"\r\n                    ) : (\r\n                      <img\r\n                        src={Comment}\r\n                        alt=\"comment\"\r\n                        className=\"chat\"\r\n                        onClick={() =>\r\n                          showAnswerModal(\r\n                            received.id,\r\n                            received.userId,\r\n                            received.sentUserPic,\r\n                            received.questionText\r\n                          )\r\n                        }\r\n                      />\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n\r\n              {\r\n                // 1. 내 스페이스의 질문일 때 currentUserInfo.userId === spaceOwner.userId\r\n                // 2. 내가 작성한 질문, 답변일 때 currentUserInfo.userId === received.userId\r\n              }\r\n              <div className=\"more\">\r\n                {currentUserInfo.userId === spaceOwner.userId ||\r\n                currentUserInfo.userId === received.sendingUserId ? (\r\n                  <img src={More} alt=\"more\" onClick={() => clickMore(index)} />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {deleteStates[index] && (\r\n                  <div\r\n                    className=\"del\"\r\n                    onClick={() =>\r\n                      showDelModal(received.id, spaceId, currentUserInfo.userId)\r\n                    }\r\n                  >\r\n                    <p>\r\n                      <img src={Bin} alt=\"btin\" />\r\n                      삭제하기\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"commentWrap answerWrap\">\r\n            <div className=\"profileArea\">\r\n              {received.answers.length === 0 ? (\r\n                <img\r\n                  src={spaceOwner.picture}\r\n                  alt=\"profile2\"\r\n                  className=\"pre_questioner\"\r\n                />\r\n              ) : (\r\n                <img\r\n                  src={spaceOwner.picture}\r\n                  alt=\"profile2\"\r\n                  className=\"respondent\"\r\n                  onClick={() => {\r\n                    if (spaceId !== received.answers[0].userId.toString()) {\r\n                      window.location.href = `/${received.answers[0].userId}`;\r\n                    }\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n            <div className=\"cnt\">\r\n              {received.answers.length === 0 ? (\r\n                <p className=\"pre_Nickname\">{spaceOwner.name}</p>\r\n              ) : (\r\n                <p className=\"Nicname\">{spaceOwner.name}</p>\r\n              )}\r\n\r\n              {received.answers.length === 0 ? (\r\n                <UntilAnswering></UntilAnswering>\r\n              ) : (\r\n                <>\r\n                  <p className=\"min\">\r\n                    {getTimeDifference(received.answers[0].createdTime)}\r\n                  </p>\r\n                  <AnonymousAnswer\r\n                    question={received}\r\n                    answers={received.answers}\r\n                    currentUserInfo={currentUserInfo}\r\n                  />\r\n                </>\r\n              )}\r\n\r\n              {received.answers.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <>\r\n                  <div className=\"more\">\r\n                    {currentUserInfo.userId === received.answers[0].userId ? (\r\n                      <img\r\n                        src={More}\r\n                        alt=\"more\"\r\n                        onClick={() => clickMore_1(index)}\r\n                      />\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {a_deleteStates[index] && (\r\n                      <div\r\n                        className=\"del\"\r\n                        onClick={() =>\r\n                          a_showDelModal(\r\n                            received.answers[0].id,\r\n                            spaceId,\r\n                            currentUserInfo.userId\r\n                          )\r\n                        }\r\n                      >\r\n                        <p>\r\n                          <img src={Bin} alt=\"btin\" />\r\n                          삭제하기\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n\r\n            {/* 질문 삭제하기 팝업  */}\r\n            {delModal && (\r\n              <Delete\r\n                questionId={selectedQuestionId}\r\n                spaceId={selectedSpaceId} // 스페이스 ID 전달\r\n                userId={selectedUserId} // 유저 ID 전달\r\n                onClose={onClose}\r\n              ></Delete>\r\n            )}\r\n            {/* 답변 삭제하기 팝업  */}\r\n            {a_delModal && (\r\n              <ADelete\r\n                answerId={selectedAnswerId}\r\n                spaceId={selectedSpaceId} // 스페이스 ID 전달\r\n                userId={selectedUserId} // 유저 ID 전달\r\n                onClose={onClose}\r\n              ></ADelete>\r\n            )}\r\n            {/* -- 등록불가 팝업 */}\r\n            {cantModal && <CantModal onClose={onClose}></CantModal>}\r\n          </div>\r\n        </React.Fragment>\r\n      ))}\r\n      {answerModal && (\r\n        <AnswerRegister\r\n          CloseAnswerModal={closeAnswerModal}\r\n          currentUserInfo={currentUserInfo}\r\n          questionId={selectedQuestionId}\r\n          sentUserId={selectedQuestionUserId}\r\n          sentUserPic={selectedQuestionUserPic}\r\n          questionText={selectedQuestionText}\r\n        ></AnswerRegister>\r\n      )}\r\n      {loading && <Loading />}\r\n      <div ref={spinnerRef} />\r\n    </>\r\n  );\r\n}\r\n\r\nReceiveComment.propTypes = {\r\n  spaceId: PropTypes.string.isRequired,\r\n  currentUserInfo: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport default ReceiveComment;\r\n\r\n// 질문 등록 시간과 현재 시간 사이의 차이를 계산하는 함수\r\nfunction getTimeDifference(createdTime) {\r\n  return moment(createdTime).locale(\"ko\").fromNow();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}